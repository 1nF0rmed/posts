#!/usr/bin/env ruby

require 'optparse'
require 'bundler/inline'

gemfile do
  source 'https://rubygems.org'
  gem 'stringex'
  gem 'git'
  gem 'os'
end

$git = Git.open(File.join(__dir__, ".."))

class Post
  def initialize(author, date, title)
    @author = author
    @date   = date
    @title  = title
  end

  def create
    puts "on disk | #{full_path}"
    puts "on blog | #{url}"
    puts
    unless File.exist?(full_path)
      File.write(full_path, template)
      puts "post created"
    else
      puts "post already exists"
      exit 1
    end
  end

  def browse
    Kernel.system("open", url)
  end

  def edit(editor)
    if cli_editor?(editor)
      Kernel.exec(editor, full_path)
    else
      Kernel.system("open", full_path, "-a", editor)
    end
  end

  def commit(git)
    git.pull
    git.add(full_path)
    git.commit_all(%Q|Initial draft of "#{@title}"|)
    git.push
  end

  private

  def cli_editor?(editor)
    [
      /\/?vim$/,
    ].any? { |regex| regex.match(editor) }
  end

  def full_path
    File.expand_path(File.join(__dir__, "../", path))
  end

  def path
    "posts/#{formatted_date}-#{title_for_url}.md"
  end

  def url
    "https://blog.arkency.com/#{title_for_url}"
  end

  def formatted_date
    @date.strftime('%Y-%m-%d')
  end

  def title_for_url
    @title.to_url
  end

  def template
    <<~EOT
      ---
      title: "#{@title}"
      created_at: #{@date}
      author: #{@author}
      tags: []
      kind: article
      publish: false
      ---

      FIXME: Place post lead here.

      <!-- more -->

      FIXME: Place post body here.

      ```ruby
      Person.new.show_secret
      # => 1234vW74X&
      ```
    EOT
  end
end

parser =
  OptionParser.new do |opts|
    opts.on('-t TITLE', String, "Title of the post you're about to write")
    opts.on('-a AUTHOR', String, "How people call you")
    opts.on('-b', "Open browser")
    opts.on('-c', "Commit and push initial draft")
    opts.on('-e EDITOR', "Open post with given editor")
  end
begin
  parser.parse!(into: params = {})
  raise OptionParser::MissingArgument unless params[:t]
rescue OptionParser::MissingArgument, OptionParser::InvalidOption
  puts parser.help
  exit
end

author = params[:a] || $git.config["user.name"]
post   = Post.new(author, Time.now, params[:t])
post.create
post.browse           if params[:b]
post.commit($git)     if params[:c]
post.edit(params[:e]) if params[:e]


